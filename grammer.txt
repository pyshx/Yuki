<Program>     -> <FunctionList>

<FunctionList>      -> <Function> | <Function> <FunctionList>

<Function>    -> <Type> <Identifier> LPAREN <ArgList> RPAREN 
                LBRACE
                    <Body>
                    <ReturnStmt>
                RBRACE

<ReturnStmt>  -> RETURN (<Expr> | e) SEMICOLON

<ArgList>     -> e | <Args>

<Args>        -> <Type> <Identifier> | <Type> <Identifier> COMMA <ArgList> 

<Type>       -> INT | CHAR 

<Identifier> -> [a-zA-Z]+

<Body>       -> <StmtList>

<StmtList>   -> e | <Stmt> <StmtList>

<Stmt>   -> <AssignStmt> | <IfElse> | <ForLoop>

<AssignStmt> -> [<Type>] <Identifier> [LBRACKET <Expr> RBRACKET] <Assign> <Expr> SEMICOLON

<Expr>       -> <Term> [(+ | -) <Expr>]

<Term>       -> <Factor> [( * | / ) <Term>]

<Factor>     -> LPAREN <Expr> RPAREN | <FnCall> | <Identifier> | INTEGER | CHARACTER | <ArrIdent>

<ArrIdent>   -> <Identifier> LBRACKET <Expr> RBRACKET

<Fncall>     -> <Identifier> LPAREN <ParList> RPAREN

<ParList>    -> {<Identifier>}

<IfElse>    -> IF LPAREN <CompStmt> RPAREN 
                    LBRACE
                        <Body>
                    RBRACE 
                ELSE 
                    LBRACE
                        <Body>
                    RBRACE

<CompStmt>   -> <Identifier> (>|<| == | !=) <Identifier>

<ForLoop>   -> <FOR> LPAREN <AssignStmt> <CompStmt> <semicolon> <AssignStmt> 
                LBRACE
                    <Body>
                RBRACE

INTEGER      -> [0-9]+
CHARACTER    -> [a-zA-Z]
LPAREN       -> (
RPAREN       -> )
LBRACKET     -> [
RBRACKET     -> ]
LBRACE       -> {
RBRACE       -> }
INT          -> int 
CHAR         -> char
FOR          -> for
IF           -> if
ELSE         -> else
SEMICOLON    -> ;
COMMA        -> ,